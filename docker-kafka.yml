networks:
  byfn: {}
services:
  cli:
    container_name: cli
    depends_on:
    - orderer0.example.com
    - orderer1.example.com
    - peer0.org1.example.com
    - peer0.org2.example.com
    - peer1.org1.example.com
    - peer1.org2.example.com
    environment:
      CORE_LOGGING_LEVEL: DEBUG
      CORE_PEER_ADDRESS: peer0.org1.example.com:7051
      CORE_PEER_ID: cli
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_MSPCONFIGPATH: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
      CORE_PEER_TLS_CERT_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      CORE_PEER_TLS_ENABLED: "true"
      CORE_PEER_TLS_KEY_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      GOPATH: /opt/gopath
    image: 'hyperledger/fabric-tools:'
    networks:
      byfn: null
    tty: true
    volumes:
    - /var/run:/host/var/run:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/examples/chaincode:/opt/gopath/src/github.com/chaincode:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  kafka0.example.com:
    container_name: kafka0.example.com
    depends_on:
    - zookeeper0.example.com
    - zookeeper1.example.com
    - zookeeper2.example.com
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '3'
      KAFKA_MESSAGE_MAX_BYTES: '103809024'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
      KAFKA_REPLICA_FETCH_MAX_BYTES: '103809024'
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper0.example.com:2181,zookeeper1.example.com:2181,zookeeper2.example.com:2181
    image: hyperledger/fabric-kafka
    networks:
      byfn: null
    ports:
    - 9092:9092/tcp
    - 9093:9093/tcp
    restart: always
  kafka1.example.com:
    container_name: kafka1.example.com
    depends_on:
    - zookeeper0.example.com
    - zookeeper1.example.com
    - zookeeper2.example.com
    environment:
      KAFKA_BROKER_ID: '1'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '3'
      KAFKA_MESSAGE_MAX_BYTES: '103809024'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
      KAFKA_REPLICA_FETCH_MAX_BYTES: '103809024'
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper0.example.com:2181,zookeeper1.example.com:2181,zookeeper2.example.com:2181
    image: hyperledger/fabric-kafka
    networks:
      byfn: null
    ports:
    - 10092:9092/tcp
    - 10093:9093/tcp
    restart: always
  kafka2.example.com:
    container_name: kafka2.example.com
    depends_on:
    - zookeeper0.example.com
    - zookeeper1.example.com
    - zookeeper2.example.com
    environment:
      KAFKA_BROKER_ID: '2'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '3'
      KAFKA_MESSAGE_MAX_BYTES: '103809024'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
      KAFKA_REPLICA_FETCH_MAX_BYTES: '103809024'
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper0.example.com:2181,zookeeper1.example.com:2181,zookeeper2.example.com:2181
    image: hyperledger/fabric-kafka
    networks:
      byfn: null
    ports:
    - 11092:9092/tcp
    - 11093:9093/tcp
    restart: always
  kafka3.example.com:
    container_name: kafka3.example.com
    depends_on:
    - zookeeper0.example.com
    - zookeeper1.example.com
    - zookeeper2.example.com
    environment:
      KAFKA_BROKER_ID: '3'
      KAFKA_DEFAULT_REPLICATION_FACTOR: '3'
      KAFKA_MESSAGE_MAX_BYTES: '103809024'
      KAFKA_MIN_INSYNC_REPLICAS: '2'
      KAFKA_REPLICA_FETCH_MAX_BYTES: '103809024'
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper0.example.com:2181,zookeeper1.example.com:2181,zookeeper2.example.com:2181
    image: hyperledger/fabric-kafka
    networks:
      byfn: null
    ports:
    - 12092:9092/tcp
    - 12093:9093/tcp
    restart: always
  orderer0.example.com:
    command: orderer
    container_name: orderer0.example.com
    depends_on:
    - kafka0.example.com
    - kafka1.example.com
    - kafka2.example.com
    - kafka3.example.com
    environment:
      ORDERER_GENERAL_GENESISFILE: /var/hyperledger/orderer/orderer.genesis.block
      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/orderer/msp
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CERTIFICATE: /var/hyperledger/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_ENABLED: "true"
      ORDERER_GENERAL_TLS_PRIVATEKEY: /var/hyperledger/orderer/tls/server.key
      ORDERER_GENERAL_TLS_ROOTCAS: '[/var/hyperledger/orderer/tls/ca.crt]'
      ORDERER_KAFKA_RETRY_SHORTINTERVAL: 1s
      ORDERER_KAFKA_RETRY_SHORTTOTAL: 30s
      ORDERER_KAFKA_VERBOSE: "true"
    image: 'hyperledger/fabric-orderer:'
    networks:
      byfn: null
    ports:
    - 7050:7050/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls:/var/hyperledger/orderer/tls:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
  orderer1.example.com:
    command: orderer
    container_name: orderer1.example.com
    depends_on:
    - kafka0.example.com
    - kafka1.example.com
    - kafka2.example.com
    - kafka3.example.com
    environment:
      ORDERER_GENERAL_GENESISFILE: /var/hyperledger/orderer/orderer.genesis.block
      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/orderer/msp
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CERTIFICATE: /var/hyperledger/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_ENABLED: "true"
      ORDERER_GENERAL_TLS_PRIVATEKEY: /var/hyperledger/orderer/tls/server.key
      ORDERER_GENERAL_TLS_ROOTCAS: '[/var/hyperledger/orderer/tls/ca.crt]'
      ORDERER_KAFKA_RETRY_SHORTINTERVAL: 1s
      ORDERER_KAFKA_RETRY_SHORTTOTAL: 30s
      ORDERER_KAFKA_VERBOSE: "true"
    image: 'hyperledger/fabric-orderer:'
    networks:
      byfn: null
    ports:
    - 8050:8050/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls:/var/hyperledger/orderer/tls:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
  peer0.org1.example.com:
    command: peer node start
    container_name: peer0.org1.example.com
    environment:
      CORE_LOGGING_LEVEL: INFO
      CORE_PEER_ADDRESS: peer0.org1.example.com:7051
      CORE_PEER_GOSSIP_BOOTSTRAP: peer1.org1.example.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0.org1.example.com:7051
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_ID: peer0.org1.example.com
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_PROFILE_ENABLED: "true"
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/fabric/tls/server.crt
      CORE_PEER_TLS_ENABLED: "true"
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/fabric/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/fabric/tls/ca.crt
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: net_byfn
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
    image: 'hyperledger/fabric-peer:'
    networks:
      byfn: null
    ports:
    - 7051:7051/tcp
    - 7053:7053/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls:rw
    - /var/run:/host/var/run:rw
    - peer0.org1.example.com:/var/hyperledger/production:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  peer0.org2.example.com:
    command: peer node start
    container_name: peer0.org2.example.com
    environment:
      CORE_LOGGING_LEVEL: INFO
      CORE_PEER_ADDRESS: peer0.org2.example.com:7051
      CORE_PEER_GOSSIP_BOOTSTRAP: peer1.org2.example.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0.org2.example.com:7051
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_ID: peer0.org2.example.com
      CORE_PEER_LOCALMSPID: Org2MSP
      CORE_PEER_PROFILE_ENABLED: "true"
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/fabric/tls/server.crt
      CORE_PEER_TLS_ENABLED: "true"
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/fabric/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/fabric/tls/ca.crt
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: net_byfn
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
    image: 'hyperledger/fabric-peer:'
    networks:
      byfn: null
    ports:
    - 9051:7051/tcp
    - 9053:7053/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls:rw
    - /var/run:/host/var/run:rw
    - peer0.org2.example.com:/var/hyperledger/production:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  peer1.org1.example.com:
    command: peer node start
    container_name: peer1.org1.example.com
    environment:
      CORE_LOGGING_LEVEL: INFO
      CORE_PEER_ADDRESS: peer1.org1.example.com:7051
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0.org1.example.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer1.org1.example.com:7051
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_ID: peer1.org1.example.com
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_PROFILE_ENABLED: "true"
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/fabric/tls/server.crt
      CORE_PEER_TLS_ENABLED: "true"
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/fabric/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/fabric/tls/ca.crt
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: net_byfn
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
    image: 'hyperledger/fabric-peer:'
    networks:
      byfn: null
    ports:
    - 8051:7051/tcp
    - 8053:7053/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls:rw
    - /var/run:/host/var/run:rw
    - peer1.org1.example.com:/var/hyperledger/production:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  peer1.org2.example.com:
    command: peer node start
    container_name: peer1.org2.example.com
    environment:
      CORE_LOGGING_LEVEL: INFO
      CORE_PEER_ADDRESS: peer1.org2.example.com:7051
      CORE_PEER_GOSSIP_BOOTSTRAP: peer0.org2.example.com:7051
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer1.org2.example.com:7051
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_ID: peer1.org2.example.com
      CORE_PEER_LOCALMSPID: Org2MSP
      CORE_PEER_PROFILE_ENABLED: "true"
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/fabric/tls/server.crt
      CORE_PEER_TLS_ENABLED: "true"
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/fabric/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/fabric/tls/ca.crt
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: net_byfn
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
    image: 'hyperledger/fabric-peer:'
    networks:
      byfn: null
    ports:
    - 10051:7051/tcp
    - 10053:7053/tcp
    volumes:
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp:/etc/hyperledger/fabric/msp:rw
    - /opt/cello/fabric-sample-with-kafka/first-network/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls:/etc/hyperledger/fabric/tls:rw
    - /var/run:/host/var/run:rw
    - peer1.org2.example.com:/var/hyperledger/production:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  zookeeper0.example.com:
    container_name: zookeeper0.example.com
    environment:
      ZOO_MY_ID: '1'
      ZOO_SERVERS: server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:2888:3888
        server.3=zookeeper2.example.com:2888:3888
    image: hyperledger/fabric-zookeeper
    networks:
      byfn: null
    ports:
    - 2181:2181/tcp
    - 2888:2888/tcp
    - 3888:3888/tcp
    restart: always
  zookeeper1.example.com:
    container_name: zookeeper1.example.com
    environment:
      ZOO_MY_ID: '2'
      ZOO_SERVERS: server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:2888:3888
        server.3=zookeeper2.example.com:2888:3888
    image: hyperledger/fabric-zookeeper
    networks:
      byfn: null
    ports:
    - 12181:2181/tcp
    - 12888:2888/tcp
    - 13888:3888/tcp
    restart: always
  zookeeper2.example.com:
    container_name: zookeeper2.example.com
    environment:
      ZOO_MY_ID: '3'
      ZOO_SERVERS: server.1=zookeeper0.example.com:2888:3888 server.2=zookeeper1.example.com:2888:3888
        server.3=zookeeper2.example.com:2888:3888
    image: hyperledger/fabric-zookeeper
    networks:
      byfn: null
    ports:
    - 22181:2181/tcp
    - 22888:2888/tcp
    - 23888:3888/tcp
    restart: always
version: '2.0'
volumes:
  orderer0.example.com: {}
  orderer1.example.com: {}
  peer0.org1.example.com: {}
  peer0.org2.example.com: {}
  peer1.org1.example.com: {}
  peer1.org2.example.com: {}

