networks:
  sample: {}
services:
  kafka0_orange_com:
    networks:
       sample: null
    image: hyperledger/fabric-kafka
    restart: always
    environment:
      # ========================================================================
      #     Reference: https://kafka.apache.org/documentation/#configuration
      # ========================================================================
      #
      # socket.request.max.bytes
      # The maximum number of bytes in a socket request. ATTN: If you set this
      # env var, you should make sure that the value assigned to
      # `brokerConfig.Producer.MaxMessageBytes` in `newBrokerConfig()` in
      # `fabric/orderer/kafka/util.go` matches it.
      #- KAFKA_SOCKET_REQUEST_MAX_BYTES=104857600 # 100 * 1024 * 1024 B
      #
      # message.max.bytes
      # The maximum size of envelope that the broker can receive.
      - KAFKA_MESSAGE_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      #
      # replica.fetch.max.bytes
      # The number of bytes of messages to attempt to fetch for each channel.
      # This is not an absolute maximum, if the fetched envelope is larger than
      # this value, the envelope will still be returned to ensure that progress
      # can be made. The maximum message size accepted by the broker is defined
      # via message.max.bytes above.
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024 # 99 * 1024 * 1024 B
      #
      # unclean.leader.election.enable
      # Data consistency is key in a blockchain environment. We cannot have a
      # leader chosen outside of the in-sync replica set, or we run the risk of
      # overwriting the offsets that the previous leader produced, and --as a
      # result-- rewriting the blockchain that the orderers produce.
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false

      #
      # min.insync.replicas
      # Let the value of this setting be M. Data is considered committed when
      # it is written to at least M replicas (which are then considered in-sync
      # and belong to the in-sync replica set, or ISR). In any other case, the
      # write operation returns an error. Then:
      # 1. if just one replica out of the N (see default.replication.factor
      # below) that the channel data is written to becomes unavailable,
      # operations proceed normally.
      # 2. If N - M + 1 (or more) replicas become unavailable, Kafka cannot
      # maintain an ISR set of M, so it stops accepting writes. Reads work
      # without issues. The cluster becomes writeable again when M replicas get
      # in-sync.
      - KAFKA_MIN_INSYNC_REPLICAS=2
      #
      # default.replication.factor
      # Let the value of this setting be M. This means that:
      # 1. Each channel will have its data replicated to N brokers. These are
      # the candidates for the ISR set for a channel. As we've noted in the
      # min.insync.replicas section above, not all of these brokers have to be
      # available all the time. We choose a default.replication.factor of N so
      # as to have the largest possible candidate set for a channel's ISR.
      # 2. Channel creations cannot go forward if less than N brokers are up.
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      #
      # zookeper.connect
      # Point to the set of Zookeeper nodes comprising a ZK ensemble.
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0_orange_com:2181
      #
      # zookeeper.connection.timeout.ms
      # The max time that the client waits to establish a connection to
      # Zookeeper. If not set, the value in zookeeper.session.timeout.ms (below)
      # is used.
      #- KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS = 6000
      #
      # zookeeper.session.timeout.ms
      #- KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS = 6000
    #ports:
      #- '9092'
    depends_on:
      - zookeeper0_orange_com
  zookeeper0_orange_com:
    image: hyperledger/fabric-zookeeper
    environment:
      - ZOO_SERVERS=server.1=zookeeper0_orange_com:2888:3888
    restart: always
    networks:
      sample: null  
  ca_peerOrg1:
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca_peerOrg1-cert.pem
      --ca.keyfile /etc/hyperledger/fabric-ca-server-config/key_sk -b admin:PwD4AdminCA
      -d'
    environment:
      FABRIC_CA_HOME: /etc/hyperledger/fabric-ca-server
      FABRIC_CA_SERVER_CA_NAME: ca_peerOrg1
      FABRIC_CA_SERVER_TLS_CERTFILE: /etc/hyperledger/fabric-ca-server-config/ca_peerOrg1-cert.pem
      FABRIC_CA_SERVER_TLS_ENABLED: "True"
      FABRIC_CA_SERVER_TLS_KEYFILE: /etc/hyperledger/fabric-ca-server-config/key_sk
      'TZ: UTC': null
    image: hyperledger/fabric-ca:x86_64-1.1.0
    networks:
      sample: null
    ports:
    - 7054:7054/tcp
    volumes:
    - /opt/ols/composer/crypto-config/peerOrganizations/org1_orange_com/ca:/etc/hyperledger/fabric-ca-server-config:rw
  cli:
    deploy:
      restart_policy:
        condition: none
        delay: 60s
    command: /bin/bash -c './scripts/init.sh;'
    depends_on:
    - ca_peerOrg1
    - orderer_orange_com
    - peer0_org1_orange_com
    environment:
      CORE_LOGGING_LEVEL: DEBUG
      CORE_PEER_ADDRESS: peer0_org1_orange_com:7051
      CORE_PEER_ID: cli
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_MSPCONFIGPATH: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1_orange_com/users/Admin@org1_orange_com/msp
      CORE_PEER_TLS_CERT_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1_orange_com/peers/peer0_org1_orange_com/tls/server.crt
      CORE_PEER_TLS_ENABLED: "True"
      CORE_PEER_TLS_KEY_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1_orange_com/peers/peer0_org1_orange_com/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1_orange_com/peers/peer0_org1_orange_com/tls/ca.crt
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      GOPATH: /opt/gopath
      'TZ: UTC': null
    hostname: fabric-cli
    image: hyperledger/fabric-tools:x86_64-1.1.0
    links:
    - orderer_orange_com
    - peer0_org1_orange_com
    - ca_peerOrg1
    networks:
      sample: null
    ports:
    - 5050:5050/tcp
    stdin_open: true
    tty: true
    volumes:
    - /var/run:/host/var/run:rw
    - /opt/ols/composer/chaincode:/opt/gopath/src/github.com/hyperledger/fabric/chaincode:rw
    - /opt/ols/composer/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto:rw
    - /opt/ols/composer/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts:rw
    - /opt/ols/composer/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  couchdb0:
    environment:
      COUCHDB_PASSWORD: couchdb_pwd0
      COUCHDB_USER: couchdb_user0
    image: hyperledger/fabric-couchdb
    networks:
      sample: null
    ports:
    - 5984:5984/tcp
  orderer_orange_com:
    command: orderer
    environment:
      ORDERER_GENERAL_GENESISFILE: /var/hyperledger/orderer/orderer.genesis.block
      ORDERER_GENERAL_GENESISMETHOD: file
      ORDERER_GENERAL_LISTENADDRESS: 0.0.0.0
      ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/orderer/msp
      ORDERER_GENERAL_LOCALMSPID: OrdererMSP
      ORDERER_GENERAL_LOGLEVEL: debug
      ORDERER_GENERAL_TLS_CERTIFICATE: /var/hyperledger/orderer/tls/server.crt
      ORDERER_GENERAL_TLS_ENABLED: "True"
      ORDERER_GENERAL_TLS_PRIVATEKEY: /var/hyperledger/orderer/tls/server.key
      ORDERER_GENERAL_TLS_ROOTCAS: '[/var/hyperledger/orderer/tls/ca.crt]'
      'TZ: UTC': null
    image: hyperledger/fabric-orderer:x86_64-1.1.0
    networks:
      sample: null
    ports:
    - 7050:7050/tcp
    volumes:
    - /opt/ols/composer/crypto-config/ordererOrganizations/orange_com/orderers/orderer_orange_com/msp:/var/hyperledger/orderer/msp:rw
    - /opt/ols/composer/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block:rw
    - /opt/ols/composer/crypto-config/ordererOrganizations/orange_com/orderers/orderer_orange_com/tls:/var/hyperledger/orderer/tls:rw
    - orderer_orange_com:/var/hyperledger/production/orderer:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    depends_on:
    - kafka0_orange_com
  peer0_org1_orange_com:
    command: peer node start
    depends_on:
    - couchdb0
    environment:
      CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS: couchdb0:5984
      CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD: couchdb_pwd0
      CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME: couchdb_user0
      CORE_LEDGER_STATE_STATEDATABASE: CouchDB
      CORE_LOGGING_LEVEL: DEBUG
      CORE_PEER_ADDRESS: peer0_org1_orange_com:7051
      CORE_PEER_CHAINCODELISTENADDRESS: 0.0.0.0:7052
      CORE_PEER_GOSSIP_EXTERNALENDPOINT: peer0_org1_orange_com:7051
      CORE_PEER_GOSSIP_ORGLEADER: "false"
      CORE_PEER_GOSSIP_USELEADERELECTION: "true"
      CORE_PEER_ID: peer0_org1_orange_com
      CORE_PEER_LOCALMSPID: Org1MSP
      CORE_PEER_PROFILE_ENABLED: "true"
      CORE_PEER_TLS_CERT_FILE: /etc/hyperledger/fabric/tls/server.crt
      CORE_PEER_TLS_ENABLED: "True"
      CORE_PEER_TLS_KEY_FILE: /etc/hyperledger/fabric/tls/server.key
      CORE_PEER_TLS_ROOTCERT_FILE: /etc/hyperledger/fabric/tls/ca.crt
      CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: project1_sample
      CORE_VM_ENDPOINT: unix:///host/var/run/docker.sock
      'TZ: UTC': null
    image: hyperledger/fabric-peer:x86_64-1.1.0
    networks:
      sample: null
    ports:
    - 7051:7051/tcp
    - 7053:7053/tcp
    volumes:
    - /opt/ols/composer/crypto-config/peerOrganizations/org1_orange_com/peers/peer0_org1_orange_com/msp:/etc/hyperledger/fabric/msp:rw
    - /opt/ols/composer/crypto-config/peerOrganizations/org1_orange_com/peers/peer0_org1_orange_com/tls:/etc/hyperledger/fabric/tls:rw
    - /var/run:/host/var/run:rw
    - peer0_org1_orange_com:/var/hyperledger/production:rw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
version: '3.0'
volumes:
  orderer_orange_com: {}
  peer0_org1_orange_com: {}

